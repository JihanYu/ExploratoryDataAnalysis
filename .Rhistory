}
n0 <- n1/n1.n0
n1
is.na(n1)
( (za + zb)^2 * std.drv0 * (q12)^2 ) / (effect.size^2)
za
zb
std.drv0
q12
effect.size
n1.n0
rm(list=ls())
a <- 0.05;  b <- 0.2
effect.size <- 5
mu0 <- 0;  std.drv0 <- 1
mu1 <- mu0 + effect.size;  std.drv1 <- 1
one.two <- TRUE
n1 <- 30;  n1.n0 <- 1;
two.sided <- 1;  if(one.two == TRUE) two.sided <- 2
za <- qnorm(a/two.sided, lower.tail=FALSE)
zb <- qnorm(b, lower.tail=FALSE)
q12 <- NULL
if(n1.n0 < 1){
q12 <- 1 + 1/n1.n0
} else {
q12 <- 1 + n1.n0
}
q12
( (za + zb)^2 * std.drv0 * (q12)^2 ) / (effect.size^2)
std.drv0
za + zb
library(ggplot2)
a <- 0.05;  b <- 0.2
effect.size <- 0.5
mu0 <- 0;  std.drv0 <- 1
mu1 <- mu0 + effect.size;  std.drv1 <- 1
one.two <- TRUE
n1 <- 30;  n1.n0 <- 1;
two.sided <- 1;  if(one.two == TRUE) two.sided <- 2
za <- qnorm(a/two.sided, lower.tail=FALSE)
zb <- qnorm(b, lower.tail=FALSE)
q12 <- NULL
if(n1.n0 < 1){
q12 <- 1 + 1/n1.n0
} else {
q12 <- 1 + n1.n0
}
if(is.na(n1)){
n1 <- ( (za + zb)^2 * std.drv0 * (q12)^2 ) / (effect.size^2)
}
n0 <- n1/n1.n0
std.err0 <- std.drv0 / sqrt(n0/2)
std.err1 <- std.drv1 / sqrt(n1/2)
x <- seq(from = mu0 - 5*std.err0, to = mu1 + 5*std.err1, by=0.01)
h0 <- dnorm(x, mean=mu0, sd=std.err0)
h1 <- dnorm(x, mean=mu1, sd=std.err1)
h.norm <- data.frame(x, h0, h1)
a.h0 <- qnorm(a/two.sided, mean=mu0, sd=std.err0, lower.tail=FALSE)
b.h1 <- qnorm(b, mean=mu1, sd=std.error1)
p <- ggplot(h.norm, aes(x=x, y=h0)) +
geom_line(aes(x=x, y=h0), color="red") +
geom_line(aes(x=x, y=h1), color="blue") +
geom_vline(xintercept=a.h0) +
geom_vline(xintercept=b.h1) +
geom_ribbon(data=subset(h.norm, a.h0 <= x & x <= max(x)),
aes(ymin=0, ymax=h0, fill="H0", alpha=0.5)) +
geom_ribbon(data=subset(h.norm, min(x) <= x & x <= a.h0),
aes(ymin=0, ymax=h1, fill="H1", alpha=0.5))
print(p)
b.h1 <- qnorm(b, mean=mu1, sd=std.err1)
p <- ggplot(h.norm, aes(x=x, y=h0)) +
geom_line(aes(x=x, y=h0), color="red") +
geom_line(aes(x=x, y=h1), color="blue") +
geom_vline(xintercept=a.h0) +
geom_vline(xintercept=b.h1) +
geom_ribbon(data=subset(h.norm, a.h0 <= x & x <= max(x)),
aes(ymin=0, ymax=h0, fill="H0", alpha=0.5)) +
geom_ribbon(data=subset(h.norm, min(x) <= x & x <= a.h0),
aes(ymin=0, ymax=h1, fill="H1", alpha=0.5))
print(p)
( (za + zb)^2 * std.drv0 * (q12)^2 ) / (effect.size^2)
power.b <- pnorm(qnorm(0.05), mean=mu1, sd=std.err1, lower.tail=FALSE)
if (power.b >= (1-b)){
cat("Power :", power.b, "- adequate")
} else{
cat("Power :", power.b, "- inadequate")
}
b
std.err0
std.drv0
std.drv1
n0
n1
power.b
qnorm(0.05)
qnorm(0.05, lower.tail=FALSE)
a
two.sided
qnorm(a/two.sided, lower.tail=FALSE)
pnorm(qnorm(a/two.sided, lower.tail=FALSE), mean=mu1, sd=std.err1, lower.tail=FALSE)
mu1
std.err1
power.b <- pnorm(qnorm(a/two.sided, lower.tail=FALSE), mean=mu1, sd=std.err1, lower.tail=FALSE)
if (power.b >= (1-b)){
cat("Power :", power.b, "- adequate")
} else{
cat("Power :", power.b, "- inadequate")
}
cat("abc")
cat("abc\n")
if (power.b >= (1-b)){
cat("Power :", power.b, "- adequate\n")
} else{
cat("Power :", power.b, "- inadequate\n")
}
b
a <- 0.05;  b <- 0.2
effect.size <- 5
mu0 <- 0;  std.drv0 <- 1
mu1 <- mu0 + effect.size;  std.drv1 <- 1
one.two <- TRUE
n1 <- 130;  n1.n0 <- 1;
two.sided <- 1;  if(one.two == TRUE) two.sided <- 2
za <- qnorm(a/two.sided, lower.tail=FALSE)
zb <- qnorm(b, lower.tail=FALSE)
q12 <- NULL
if(n1.n0 >= 1){
q12 <- 1 + 1/n1.n0
} else {
q12 <- 1 + n1.n0
}
if(is.na(n1)){
n1 <- ( (za + zb)^2 * std.drv0^2 * (q12)^2 ) / (effect.size^2)
}
n0 <- n1/n1.n0
std.err0 <- std.drv0 / sqrt(n0/2)
std.err1 <- std.drv1 / sqrt(n1/2)
x <- seq(from = mu0 - 5*std.err0, to = mu1 + 5*std.err1, by=0.01)
h0 <- dnorm(x, mean=mu0, sd=std.err0)
h1 <- dnorm(x, mean=mu1, sd=std.err1)
h.norm <- data.frame(x, h0, h1)
a.h0 <- qnorm(a/two.sided, mean=mu0, sd=std.err0, lower.tail=FALSE)
b.h1 <- qnorm(b, mean=mu1, sd=std.err1)
p <- ggplot(h.norm, aes(x=x, y=h0)) +
geom_line(aes(x=x, y=h0), color="red") +
geom_line(aes(x=x, y=h1), color="blue") +
geom_vline(xintercept=a.h0) +
geom_vline(xintercept=b.h1) +
geom_ribbon(data=subset(h.norm, a.h0 <= x & x <= max(x)),
aes(ymin=0, ymax=h0, fill="H0", alpha=0.5)) +
geom_ribbon(data=subset(h.norm, min(x) <= x & x <= a.h0),
aes(ymin=0, ymax=h1, fill="H1", alpha=0.5))
print(p)
power.b <- pnorm(qnorm(a/two.sided, lower.tail=FALSE), mean=mu1, sd=std.err1, lower.tail=FALSE)
if (power.b >= (1-b)){
cat("Power :", power.b, "- adequate\n")
} else{
cat("Power :", power.b, "- inadequate\n")
}
a <- 0.05;  b <- 0.2
effect.size <- 0.5
mu0 <- 0;  std.drv0 <- 1
mu1 <- mu0 + effect.size;  std.drv1 <- 1
one.two <- TRUE
n1 <- 130;  n1.n0 <- 1;
two.sided <- 1;  if(one.two == TRUE) two.sided <- 2
za <- qnorm(a/two.sided, lower.tail=FALSE)
zb <- qnorm(b, lower.tail=FALSE)
q12 <- NULL
if(n1.n0 >= 1){
q12 <- 1 + 1/n1.n0
} else {
q12 <- 1 + n1.n0
}
if(is.na(n1)){
n1 <- ( (za + zb)^2 * std.drv0^2 * (q12)^2 ) / (effect.size^2)
}
n0 <- n1/n1.n0
std.err0 <- std.drv0 / sqrt(n0/2)
std.err1 <- std.drv1 / sqrt(n1/2)
x <- seq(from = mu0 - 5*std.err0, to = mu1 + 5*std.err1, by=0.01)
h0 <- dnorm(x, mean=mu0, sd=std.err0)
h1 <- dnorm(x, mean=mu1, sd=std.err1)
h.norm <- data.frame(x, h0, h1)
a.h0 <- qnorm(a/two.sided, mean=mu0, sd=std.err0, lower.tail=FALSE)
b.h1 <- qnorm(b, mean=mu1, sd=std.err1)
p <- ggplot(h.norm, aes(x=x, y=h0)) +
geom_line(aes(x=x, y=h0), color="red") +
geom_line(aes(x=x, y=h1), color="blue") +
geom_vline(xintercept=a.h0) +
geom_vline(xintercept=b.h1) +
geom_ribbon(data=subset(h.norm, a.h0 <= x & x <= max(x)),
aes(ymin=0, ymax=h0, fill="H0", alpha=0.5)) +
geom_ribbon(data=subset(h.norm, min(x) <= x & x <= a.h0),
aes(ymin=0, ymax=h1, fill="H1", alpha=0.5))
print(p)
power.b <- pnorm(qnorm(a/two.sided, lower.tail=FALSE), mean=mu1, sd=std.err1, lower.tail=FALSE)
if (power.b >= (1-b)){
cat("Power :", power.b, "- adequate\n")
} else{
cat("Power :", power.b, "- inadequate\n")
}
mu1
std.err1
shiny::runApp('C:/Users/MED1/Desktop/Coursera/project/DDP')
runApp('C:/Users/MED1/Desktop/Coursera/project/DDP')
knitr::opts_chunk$set(echo=FALSE, fig.align = "center", message=FALSE, warning=FALSE, cache=TRUE)
library(shiny)
shinyUI(fluidPage(
titlePanel("Sample size, Power calculation - 2 dichotomous groups(t-test)"),
sidebarLayout(
sidebarPanel(
h3("Statistical parameters"),
sliderInput("a", "alpha:", min=0.001, max=1, value=0.05),
sliderInput("b", "beta:", min=0, max=1, value=0.2),
h3("Distribution parameters"),
numericInput("mu0", "Mean of H0: ", value=0),
numericInput("std.dev0", "Stand dev of H0: ", value=1),
numericInput("std.dev1", "Stand dev of H1: ", value=1),
numericInput("effect.size", "Effect size: ", value=0.5),
numericInput("n1", "sample number(H1): - if determined", value=NULL),
numericInput("n1.n0", "ratio of number(H1/H0): ", value=1),
checkboxInput("one.two", "2 sided test", value=TRUE),
submitButton("Submit")
),
mainPanel(
plotOutput("dispPlot"),
verbatimTextOutput("print.cal.sample.n"),
verbatimTextOutput("print.prov.sample.n"),
verbatimTextOutput("print.power")
)
)
))
library(shiny);  library(ggplot2)
shinyServer(function(input, output) {
mu1 <- reactive({ input$mu0 + input$effect.size })
two.sided <- reactive({
if(input$one.two == TRUE){ 2 } else{ 1 }
})
za <- reactive({ qnorm(input$a/two.sided(), lower.tail=FALSE) })
zb <- reactive({ qnorm(input$b, lower.tail=FALSE) })
q12 <- reactive({
if(input$n1.n0 >= 1){ 1 + 1/input$n1.n0 } else{ 1 + input$n1.n0 }
})
est.sample.size <- reactive({
( (za() + zb())^2 * input$std.dev0^2 * q12() ) / (input$effect.size^2)
})
n1.new <- reactive({
if(is.na(input$n1)){ est.sample.size() } else{ input$n1 }
})
n0 <- reactive({ n1.new()/input$n1.n0 })
std.err0 <- reactive({ input$std.dev0/sqrt(n0()/2) })
std.err1 <- reactive({ input$std.dev1/sqrt(n1.new()/2) })
power.b <- reactive({
pnorm( qnorm(input$a/two.sided(), mean=input$mu0, sd=std.err0(), lower.tail=FALSE),
mean=mu1(), sd=std.err1(), lower.tail=FALSE)
})
runApp('C:/Users/MED1/Desktop/Coursera/project/DDP')
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='jihanyu',
token='467706F8E24924114CC674C95D925950',
secret='<SECRET>')
rsconnect::setAccountInfo(name='jihanyu',
token='467706F8E24924114CC674C95D925950',
secret='<SECRET>')
rsconnect::setAccountInfo(name='jihanyu',
token='467706F8E24924114CC674C95D925950',
secret='0zhbiQTbLDfBsQmB6AN3xrFJyYoEubCPV0Uc52Cw')
shiny::runApp('C:/Users/MED1/Desktop/Coursera/project/DDP')
?iris
?devtools
??devtools
library(devtools)
install.packages("devtools")
library(devtools)
?aes
?install_github
session.info()
sessioninfo()
SESSIONINFO()
session_info()
install.packages("KernSmooth")
library(KernSmooth)
sessionInfo()
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2scv, stringsAsFactors=FALSE)
mydf <- read.csv("path2scv.csv", stringsAsFactors=FALSE)
mydf <- read.csv(path2csv)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -time)
select(cran, -5:20)
select(cran, -time)
-5:20
-5:-20
-(5:20)
select(X:size)
select(x:size)
select
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version=="3.1.1", country="US")
version
filter(cran, r_version=="3.6.3", country="US")
a
ad'foj of '
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version == "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500)
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, r_version == !is.na())
filter(cran, !is.na(r_version))
cran2
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
desc(ip_id)
desc(cran, ip_id)
desc(cran$ip_id)
arrange(cran, desc(ip_id))
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
select(cran, ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size/2^20)
size_mb/2^10
mutate(cran3, size_mb = size/2^10)
mutate(cran3, size_mb=size/2^20, size_gb=size_mb/2^10)
correct_size
mutate(cran3)
mutate(cran3, correct_size=size+1000)
summarize(cran, avg_bytes=mean(size))
library(dplyr)
cran <- tbl_df
cran <- tbl_df(mydf)
rm("mydf")
cran
?groub_by
?group_by
by_package <- group_by(cran, package)
by_package
summarize(cran)
summarize(by_package, mean(size))
submit()
tbl
pack_sum
quantile(pack_sum$count, probs=0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
view(top_counts)
View(top_counts)
arrange(top_counts, count)
arrange(top_counts, desc(count))
arrange(top_counts, desc(count))
top_counts_sortedarrange(top_counts, desc(count))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs=0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
arrange(top_unique, unique)
arrange(top_unique, desc(unique))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
gather
?gather
gather(students, sex, count, -grade)
student2
students2
res <- gather(students2)
res <- gather(students2, sex_class, count, -grade)
res
separate()
?separate
separate(data=res, col=sex_class, into=c("sex", "class"))
students2
submit()
student3
students3
students3
submit()
submit()
submit()
submit()
?gather
?gather
submit()
students3
str(students3)
str(students3)
submit()
# the five possible classes, there are lots of missing
# values (i.e. NAs). Use the argument na.rm = TRUE
# to omit these values from the final result.
#
# Remember that when you're using the %>% operator,
# the value to the left of it gets inserted as the
# first argument to the function on the right.
#
# Consult ?gather and/or ?chain if you get stuck.
#
students3 %>%
gather( "name", class1:class5 , na.rm= TRUE) %>%
print
submit()
students3
submit()
reset()
swirl()
submit
submit()
reset()
a
b
swirl()
students3
submit()
submit()
"A":"E"
submit()
submit()
?spread()
?spread
?spread
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
workingpath <- "C:\\Users\\MED1\\Desktop\\Coursera\\project\\ExploratoryDataAnalysis"
setwd(workingpath)
elec <- read.table("./data/household_power_consumption.txt",
colClasses="character", header=TRUE)
dim(elec)
workingpath <- "C:\\Users\\MED1\\Desktop\\Coursera\\project\\ExploratoryDataAnalysis"
setwd(workingpath)
elec <- read.table("./data/household_power_consumption.txt", sep=";",
colClasses="character", header=TRUE)
dim(elec)
head(elec)
str(elec)
elec[,3] <- as.numeric(elec[,3])
sum(is.na(elec[,3]))
dim(elec)
elec[,c(3:9)] <- as.numeric(elec[, c(3:9)])
elec[,c(3:9)] <- sapply(elec[, c(3:9), as.numeric)
elec[,c(3:9)] <- sapply(elec[, c(3:9)], as.numeric)
str(elec)
elec$Date[1]
as.Date(elec$Date[1], "%d%m%y"
)
as.Date(elec$Date[1], "%d/%m/%y")
a <- as.Date(elec$Date[1], "%d/%m/%y")
class(a)
elec$Date <- as.Date(elec$Date, "%d/%m/%y")
class(elec)
str(elec)
workingpath <- "C:\\Users\\MED1\\Desktop\\Coursera\\project\\ExploratoryDataAnalysis"
setwd(workingpath)
elec <- read.table("./data/household_power_consumption.txt", sep=";",
colClasses="character", header=TRUE)
elec2 <- elec
elec2$Date <- as.Date(elec2$Date, "%d/%m/%y")
elec2[,c(3:9)] <- sapply(elec2[, c(3:9)], as.numeric)
elec$Date[1]
elec2$Date[1]
elec2 <- elec
elec2$Date <- as.Date(elec2$Date, "%d/%m/%Y")
elec2[,c(3:9)] <- sapply(elec2[, c(3:9)], as.numeric)
elec2$Date[1]
